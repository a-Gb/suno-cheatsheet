<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Suno AI Ultimate Parameter & Meta-Tag Cheatsheet (2025)</title>
  <style>
    :root {
      --primary: #6a11cb;
      --secondary: #2575fc;
      --dark: #2c3e50;
      --light: #f8f9fa;
      --gray: #6c757d;
      --gray-light: #e9ecef;
      --accent: #ff6b6b;
      --success: #28a745;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      scroll-behavior: smooth;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      line-height: 1.4;
      color: var(--dark);
      font-size: 13px;
      padding: 0;
      max-width: 1800px;
      margin: 0 auto;
      position: relative;
    }
    
    .header {
      position: sticky;
      top: 0;
      z-index: 100;
      width: 100%;
      padding: 10px 0;
      background: linear-gradient(to right, var(--primary), var(--secondary));
      color: white;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    
    .header-content {
      max-width: 1800px;
      margin: 0 auto;
      padding: 0 15px;
    }

    h1 {
      font-size: 1.8rem;
      margin-bottom: 5px;
      text-align: center;
    }
    
    .nav-container {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 5px;
      padding: 5px 0;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 5px;
      margin-top: 5px;
    }
    
    .nav-button {
      background: rgba(255, 255, 255, 0.2);
      color: white;
      border: none;
      border-radius: 20px;
      padding: 5px 12px;
      font-size: 11px;
      cursor: pointer;
      transition: all 0.2s ease;
      white-space: nowrap;
    }
    
    .nav-button:hover {
      background: rgba(255, 255, 255, 0.4);
      transform: translateY(-1px);
    }
    
    .nav-button.active {
      background: white;
      color: var(--primary);
      font-weight: bold;
    }
    
    .main-content {
      padding: 15px;
      margin-top: 10px;
    }
    
    h2 {
      font-size: 1.2rem;
      margin: 15px 0 8px;
      border-bottom: 2px solid var(--primary);
      padding-bottom: 3px;
      color: var(--primary);
      scroll-margin-top: 110px;
    }
    
    h3 {
      font-size: 1rem;
      margin: 12px 0 5px;
      color: var(--secondary);
    }
    
    p {
      margin-bottom: 8px;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 10px;
      font-size: 12px;
    }
    
    th, td {
      padding: 5px;
      text-align: left;
      border: 1px solid var(--gray-light);
    }
    
    th {
      background-color: var(--primary);
      color: white;
      font-weight: 500;
    }
    
    tr:nth-child(even) {
      background-color: var(--gray-light);
    }
    
    .section {
      margin-bottom: 20px;
      break-inside: avoid;
      page-break-inside: avoid;
    }
    
    .status-official {
      color: #28a745;
      font-weight: bold;
    }
    
    .status-community {
      color: #2575fc;
      font-weight: bold;
    }
    
    .status-experimental {
      color: #ffc107;
      font-weight: bold;
    }
    
    .code-block {
      background-color: #f8f9fa;
      border: 1px solid #ddd;
      border-radius: 3px;
      padding: 10px;
      margin: 10px 0;
      font-family: 'Consolas', 'Monaco', monospace;
      font-size: 12px;
      overflow-x: auto;
      white-space: pre;
      line-height: 1.3;
    }
    
    .note {
      background-color: rgba(255, 193, 7, 0.1);
      border-left: 4px solid #ffc107;
      padding: 8px;
      margin: 8px 0;
      font-size: 12px;
    }
    
    .search-container {
      margin: 10px 15px;
      position: relative;
    }
    
    #searchInput {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 20px;
      font-size: 14px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }
    
    #searchInput:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 2px 8px rgba(106, 17, 203, 0.2);
    }
    
    .search-icon {
      position: absolute;
      right: 12px;
      top: 8px;
      color: var(--gray);
    }
    
    .highlight {
      background-color: #ffeb3b;
    }
    
    .layout-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(540px, 1fr));
      gap: 20px;
    }
    
    .examples-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      gap: 20px;
      margin: 15px 0;
    }
    
    .back-to-top {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: var(--primary);
      color: white;
      border: none;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      opacity: 0;
      transition: opacity 0.3s ease;
      box-shadow: 0 2px 10px rgba(0,0,0,0.2);
      z-index: 99;
    }
    
    .back-to-top.visible {
      opacity: 1;
    }
    
    .back-to-top:hover {
      background: var(--secondary);
    }

    .callout {
      background-color: rgba(37, 117, 252, 0.1);
      border-left: 4px solid var(--secondary);
      padding: 10px;
      margin: 10px 0;
      border-radius: 0 3px 3px 0;
    }
    
    .tag-legend {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin: 10px 0;
      padding: 8px;
      background-color: var(--light);
      border-radius: 5px;
      align-items: center;
    }
    
    .tag-item {
      display: flex;
      align-items: center;
      gap: 5px;
      font-size: 11px;
    }
    
    .tag-color {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      display: inline-block;
    }

    .tag-color.official {
      background-color: #28a745;
    }

    .tag-color.community {
      background-color: #2575fc;
    }

    .tag-color.experimental {
      background-color: #ffc107;
    }
    
    /* Prompt Builder Styles */
    .selectable-row {
      cursor: pointer;
      transition: background-color 0.2s;
    }
    
    .selectable-row:hover {
      background-color: rgba(106, 17, 203, 0.05);
    }
    
    .selectable-row.selected {
      background-color: rgba(106, 17, 203, 0.15);
    }
    
    .prompt-builder {
      position: fixed;
      top: 100px;
      bottom: 20px;
      right: 20px;
      width: 370px;
      background: #ffffff;
      border-radius: 10px;
      box-shadow: 0 5px 30px rgba(0,0,0,0.15);
      transition: all 0.3s ease;
      z-index: 1000;
      opacity: 0;
      transform: translateX(100%);
      display: flex;
      flex-direction: column;
      font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }
    
    .prompt-builder.active {
      opacity: 1;
      transform: translateX(0);
    }
    
    .prompt-builder-header {
      padding: 15px;
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      color: white;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-radius: 10px 10px 0 0;
    }
    
    .prompt-builder-toggle {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      color: white;
      border: none;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
      z-index: 1001;
      font-size: 24px;
      transition: all 0.2s ease;
    }
    
    .prompt-builder-toggle:hover {
      transform: scale(1.05);
      box-shadow: 0 8px 20px rgba(0,0,0,0.3);
    }
    
    .prompt-builder-content {
      padding: 0;
      overflow-y: auto;
      flex-grow: 1;
      display: flex;
      flex-direction: column;
    }
    
    .prompt-builder-tabs {
      display: flex;
      border-bottom: 1px solid var(--gray-light);
      background: #f8f9fa;
    }
    
    .prompt-builder-tab {
      padding: 10px 15px;
      font-size: 13px;
      font-weight: 500;
      cursor: pointer;
      border-bottom: 2px solid transparent;
      flex: 1;
      text-align: center;
      transition: all 0.2s;
    }
    
    .prompt-builder-tab.active {
      border-bottom-color: var(--primary);
      color: var(--primary);
      background: white;
    }
    
    .prompt-tab-content {
      display: none;
      padding: 15px;
    }
    
    .prompt-tab-content.active {
      display: block;
    }
    
    .prompt-section {
      margin-bottom: 15px;
    }
    
    .prompt-section-title {
      font-size: 14px;
      font-weight: 600;
      margin-bottom: 5px;
      color: var(--dark);
    }
    
    .character-counter {
      font-size: 11px;
      color: var(--gray);
      text-align: right;
      margin-top: 3px;
      transition: color 0.2s;
    }
    
    .character-counter.warning {
      color: #ffc107;
    }
    
    .character-counter.danger {
      color: #dc3545;
    }
    
    .prompt-builder-actions {
      padding: 15px;
      display: flex;
      justify-content: space-between;
      border-top: 1px solid var(--gray-light);
      background: #f8f9fa;
      border-radius: 0 0 10px 10px;
    }
    
    .prompt-builder-textarea {
      width: 100%;
      min-height: 120px;
      padding: 10px;
      font-family: 'Fira Code', 'SF Mono', 'Consolas', monospace;
      border: 1px solid var(--gray-light);
      border-radius: 4px;
      resize: vertical;
      font-size: 13px;
      line-height: 1.5;
    }
    
    .styled-input {
      width: 100%;
      padding: 10px;
      border: 1px solid var(--gray-light);
      border-radius: 4px;
      font-family: inherit;
      font-size: 13px;
      transition: border-color 0.2s;
    }
    
    .styled-input:focus {
      outline: none;
      border-color: var(--secondary);
      box-shadow: 0 0 0 2px rgba(37, 117, 252, 0.2);
    }
    
    .tag-list {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin-top: 8px;
    }
    
    .genre-tag {
      background: #f0f4ff;
      color: var(--secondary);
      padding: 5px 10px;
      border-radius: 20px;
      font-size: 12px;
      display: inline-flex;
      align-items: center;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .genre-tag:hover {
      background: #e0e8ff;
    }
    
    .genre-tag.selected {
      background: var(--secondary);
      color: white;
    }
    
    .builder-button {
      padding: 8px 15px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.2s;
      font-size: 13px;
    }
    
    .builder-button.primary {
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      color: white;
    }
    
    .builder-button.secondary {
      background: white;
      color: var(--dark);
      border: 1px solid var(--gray-light);
    }
    
    .builder-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .builder-button.primary:hover {
      background: linear-gradient(135deg, #5d0fb3 0%, #1963e5 100%);
    }
    
    .builder-button.secondary:hover {
      background: var(--light);
    }
    
    .builder-button:active {
      transform: translateY(0);
    }

    .select-tag {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 2px solid var(--gray-light);
      border-radius: 4px;
      margin-right: 10px;
      position: relative;
      cursor: pointer;
      vertical-align: middle;
      transition: all 0.2s;
    }
    
    .select-tag:hover {
      border-color: var(--secondary);
    }
    
    .select-tag.selected {
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      border-color: transparent;
    }
    
    .select-tag.selected:after {
      content: '✓';
      color: white;
      position: absolute;
      font-size: 14px;
      line-height: 16px;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    
    .selection-type {
      font-size: 10px;
      padding: 2px 5px;
      border-radius: 10px;
      margin-left: 5px;
      display: inline-block;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .selection-type.multiple {
      background: rgba(106, 17, 203, 0.1);
      color: #6a11cb;
    }
    
    .selection-type.single {
      background: rgba(255, 193, 7, 0.1);
      color: #d68c00;
    }
    
    .common-genres {
      margin-top: 10px;
    }
    
    @media print {
      body {
        font-size: 10px;
      }
      
      table {
        font-size: 9px;
      }
      
      .code-block {
        font-size: 9px;
      }
      
      .header, .search-container, .back-to-top, 
      .prompt-builder, .prompt-builder-toggle,
      .select-tag, .selection-type {
        display: none;
      }
      
      h2 {
        break-before: auto;
        page-break-before: auto;
      }
    }

    /* Compact layout for small screens */
    @media (max-width: 768px) {
      .layout-grid {
        grid-template-columns: 1fr;
      }
      
      .examples-grid {
        grid-template-columns: 1fr;
      }
      
      .header {
        position: relative;
      }
      
      h2 {
        scroll-margin-top: 15px;
      }
      
      .nav-container {
        overflow-x: auto;
        justify-content: flex-start;
        padding-bottom: 10px;
      }
      
      .nav-button {
        flex-shrink: 0;
      }
      
      .prompt-builder {
        max-height: 70vh;
      }
    }
    
    @media (min-width: 1600px) {
      .layout-grid {
        grid-template-columns: repeat(3, 1fr);
      }
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="header-content">
      <h1>Suno AI Ultimate Parameter & Meta-Tag Cheatsheet (v2.0)</h1>
      <div style="text-align: center; font-size: 12px; color: var(--gray); margin-top: 5px;">Last updated: March 21, 2025 • Release: v2.0-interactive • Git: 5fd1e3c</div>
      <div class="nav-container">
        <button class="nav-button" data-target="quick-start">Quick Start</button>
        <button class="nav-button" data-target="technical-params">Technical</button>
        <button class="nav-button" data-target="style-directives">Style</button>
        <button class="nav-button" data-target="structure-tags">Structure</button>
        <button class="nav-button" data-target="vocal-tags">Vocals</button>
        <button class="nav-button" data-target="sound-effects">Sound FX</button>
        <button class="nav-button" data-target="dynamic-tags">Dynamics</button>
        <button class="nav-button" data-target="tempo-tags">Tempo</button>
        <button class="nav-button" data-target="instrument-tags">Instruments</button>
        <button class="nav-button" data-target="advanced">Advanced</button>
        <button class="nav-button" data-target="examples">Examples</button>
        <button class="nav-button" data-target="changelog">Changelog</button>
      </div>
    </div>
  </div>

  <div class="search-container hide-on-print">
    <input type="text" id="searchInput" placeholder="Search for parameters, tags, or keywords...">
    <span class="search-icon">🔍</span>
  </div>

  <div class="main-content">
    <section id="quick-start" class="section">
      <h2>Quick Start Guide</h2>
      
      <div class="tag-legend">
        <span><strong>Tag Status:</strong></span>
        <div class="tag-item">
          <span class="tag-color official"></span>
          <span>Official (Suno documented)</span>
        </div>
        <div class="tag-item">
          <span class="tag-color community"></span>
          <span>Community (Widely tested)</span>
        </div>
        <div class="tag-item">
          <span class="tag-color experimental"></span>
          <span>Experimental (Variable results)</span>
        </div>
      </div>

      <div class="callout">
        <p><strong>Most Essential Parameters:</strong> <code>temp=0.8</code> (creativity), <code>cfg=7.0</code> (prompt adherence), <code>key=Aminor</code>, <code>bpm=120</code> in <code>&lt;details&gt;</code> tags at the top</p>
        <p><strong>Most Important Tags:</strong> <code>Style:</code>, <code>Exclude:</code>, <code>[Intro]</code>, <code>[Verse]</code>, <code>[Chorus]</code>, <code>[End]</code>, <code>[Female/Male Vocal]</code></p>
        <p><strong>New! Interactive Prompt Builder:</strong> Click the 🧩 button in the bottom-left corner to build your prompt. Select elements from tables by clicking on them. Single-select groups allow only one choice, while multi-select allows any number of choices.</p>
      </div>
      
      <div class="layout-grid">
        <div>
          <h3>Core Components</h3>
          <ol>
            <li><strong>Technical Parameters</strong> - Set in <code>&lt;details&gt;</code> tags at the top: <code>temp=</code>, <code>cfg=</code>, <code>bpm=</code></li>
            <li><strong>Style</strong> - Define your genre: <code>Style: Indie folk with acoustic guitar</code></li>
            <li><strong>Exclude</strong> - Set what to avoid: <code>Exclude: Heavy drums, EDM drops</code></li>
            <li><strong>Structure</strong> - Organize with section tags: <code>[Intro]</code>, <code>[Verse]</code>, <code>[Chorus]</code>, <code>[End]</code></li>
          </ol>
        </div>
        
        <div>
          <h3>Key Tips</h3>
          <ul>
            <li>Keep <code>Style:</code> descriptions under 200 characters for best results</li>
            <li>Use vocal tags like <code>[Female Vocal]</code> or <code>WOMAN:</code> to specify singers</li>
            <li>Control randomness with <code>temp=</code> (0.7 for consistency, 0.9+ for creativity)</li>
            <li>Influence musical adherence with <code>cfg=</code> (higher = stricter to prompt)</li>
            <li>Always end with <code>[End]</code> tag to properly close your song</li>
            <li>Reference specific artists/media in Style for targeted results</li>
          </ul>
        </div>
      </div>
      
      <h3>Creating a Basic Song Prompt</h3>
      <p>Minimal template for creating a song:</p>
      <div class="code-block">
&lt;details&gt;
temp=0.8
cfg=7.0
key=Aminor
bpm=120
&lt;/details&gt;

Style: [Your genre/style description]
Exclude: [Elements to avoid]

[Intro]
(Description or lyrics)

[Verse 1]
[Female/Male Vocal]
Your lyrics here...

[Chorus]
Your chorus lyrics...

[Verse 2]
More lyrics...

[Chorus]
Chorus repeats...

[Outro]
Final lyrics...
[End]
      </div>
    </section>

    <section id="technical-params" class="section">
      <h2>1. Technical Parameters</h2>
      <p>These parameters go at the top of your prompt inside <code>&lt;details&gt;</code> tags to control technical aspects of the generation.</p>
      <table>
        <thead>
          <tr>
            <th>Parameter</th>
            <th>Status</th>
            <th>Description</th>
            <th>Example</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>temp=</code></td>
            <td class="status-official">Official (API)</td>
            <td>Controls randomness/creativity (0.0-1.0+)</td>
            <td><code>temp=0.85</code></td>
            <td>Higher = more creative, Lower = more consistent</td>
          </tr>
          <tr>
            <td><code>cfg=</code></td>
            <td class="status-official">Official (API)</td>
            <td>Controls prompt adherence (1-20)</td>
            <td><code>cfg=7.0</code></td>
            <td>Higher = stricter adherence to prompt</td>
          </tr>
          <tr>
            <td><code>key=</code></td>
            <td class="status-official">Official (API)</td>
            <td>Sets musical key</td>
            <td><code>key=Cminor</code></td>
            <td>Also works as "C minor" in style text</td>
          </tr>
          <tr>
            <td><code>time_signature=</code></td>
            <td class="status-official">Official (API)</td>
            <td>Sets rhythmic structure</td>
            <td><code>time_signature=3/4</code></td>
            <td>Also works as "waltz time" in style text</td>
          </tr>
          <tr>
            <td><code>bpm=</code></td>
            <td class="status-official">Official (API)</td>
            <td>Sets tempo in beats per minute</td>
            <td><code>bpm=110</code></td>
            <td>Also works as "110 BPM" in style text</td>
          </tr>
          <tr>
            <td><code>stereo_width=</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Controls stereo field width</td>
            <td><code>stereo_width=120</code></td>
            <td>Values above 100 = wider than normal</td>
          </tr>
          <tr>
            <td><code>reverb=</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Sets reverb amount</td>
            <td><code>reverb=medium</code></td>
            <td>Try "low", "medium", "high"</td>
          </tr>
          <tr>
            <td><code>delay_time=</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Sets echo timing</td>
            <td><code>delay_time=350ms</code></td>
            <td>Values in milliseconds</td>
          </tr>
          <tr>
            <td><code>delay_feedback=</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Sets echo repetition</td>
            <td><code>delay_feedback=40</code></td>
            <td>Percentage value (0-100)</td>
          </tr>
          <tr>
            <td><code>dynamic_range=</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Controls volume variation</td>
            <td><code>dynamic_range=high</code></td>
            <td>Try "low", "medium", "high"</td>
          </tr>
          <tr>
            <td><code>master_volume=</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Sets overall output level</td>
            <td><code>master_volume=0</code></td>
            <td>Typically -6 to 0</td>
          </tr>
          <tr>
            <td><code>rubato=</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Controls timing flexibility</td>
            <td><code>rubato=moderate</code></td>
            <td>Try "subtle", "moderate", "expressive"</td>
          </tr>
        </tbody>
      </table>
    </section>

    <section id="style-directives" class="section">
      <h2>2. Style & Exclude Directives</h2>
      <table>
        <thead>
          <tr>
            <th>Parameter</th>
            <th>Status</th>
            <th>Description</th>
            <th>Example</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>Style:</code></td>
            <td class="status-official">Official</td>
            <td>Defines genre, mood, instrumentation</td>
            <td><code>Style: Cinematic orchestral with ethereal female vocals</code></td>
            <td>120-200 character max in API, crucial for setting direction</td>
          </tr>
          <tr>
            <td><code>Exclude:</code></td>
            <td class="status-official">Official</td>
            <td>Specifies elements to avoid</td>
            <td><code>Exclude: Male vocals, EDM drops, trap beats</code></td>
            <td>Works as negative prompt</td>
          </tr>
        </tbody>
      </table>
      <div class="note">
        <strong>Note:</strong> In addition to broad style descriptions, you can include specific genre references like "Cantopop", "K-pop", or media references like "Interstellar Soundtrack" or "Hans Zimmer style" for more targeted results. Language is automatically detected from lyrics, but you can specify accents like "British accent" or "Southern drawl" in the style description.
      </div>
    </section>

    <section id="structure-tags" class="section">
      <h2>3. Song Structure Tags</h2>
      <table>
        <thead>
          <tr>
            <th>Tag</th>
            <th>Status</th>
            <th>Description</th>
            <th>Example Usage</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>[Intro]</code></td>
            <td class="status-official">Official</td>
            <td>Opening section</td>
            <td><code>[Intro]</code><br>Gentle piano notes</td>
            <td>Often instrumental</td>
          </tr>
          <tr>
            <td><code>[Verse]</code> or <code>[Verse 1]</code></td>
            <td class="status-official">Official</td>
            <td>Main lyrical section</td>
            <td><code>[Verse 1]</code><br>First verse lyrics...</td>
            <td>Can be numbered for clarity</td>
          </tr>
          <tr>
            <td><code>[Pre-Chorus]</code></td>
            <td class="status-official">Official</td>
            <td>Transition before chorus</td>
            <td><code>[Pre-Chorus]</code><br>Build-up lyrics...</td>
            <td>Creates tension before chorus</td>
          </tr>
          <tr>
            <td><code>[Chorus]</code></td>
            <td class="status-official">Official</td>
            <td>Main hook/refrain</td>
            <td><code>[Chorus]</code><br>Catchy chorus lyrics...</td>
            <td>Usually repeats throughout song</td>
          </tr>
          <tr>
            <td><code>[Bridge]</code></td>
            <td class="status-official">Official</td>
            <td>Contrasting section</td>
            <td><code>[Bridge]</code><br>Different melody/lyrics...</td>
            <td>Often appears once before final chorus</td>
          </tr>
          <tr>
            <td><code>[Interlude]</code></td>
            <td class="status-official">Official</td>
            <td>Brief instrumental break</td>
            <td><code>[Interlude]</code><br>(atmospheric transition)</td>
            <td>No vocals, purely instrumental</td>
          </tr>
          <tr>
            <td><code>[Solo]</code></td>
            <td class="status-community">Community</td>
            <td>Featured instrument</td>
            <td><code>[Guitar Solo]</code><br>(soaring melody)</td>
            <td>Specify instrument type</td>
          </tr>
          <tr>
            <td><code>[Outro]</code></td>
            <td class="status-official">Official</td>
            <td>Ending section</td>
            <td><code>[Outro]</code><br>Final lyrics fading...</td>
            <td>Often paired with Fade Out</td>
          </tr>
          <tr>
            <td><code>[Hook]</code></td>
            <td class="status-community">Community</td>
            <td>Catchy repeating phrase</td>
            <td><code>[Hook]</code><br>Repeated hook line (x4)</td>
            <td>Similar to chorus but more repetitive, popular in rap/pop</td>
          </tr>
          <tr>
            <td><code>[Break]</code></td>
            <td class="status-community">Community</td>
            <td>Short pause/transition</td>
            <td><code>[Break]</code><br>(drums only)</td>
            <td>Brief section change</td>
          </tr>
          <tr>
            <td><code>[End]</code></td>
            <td class="status-official">Official</td>
            <td>Signals end of song</td>
            <td><code>[End]</code></td>
            <td>Always place as final tag</td>
          </tr>
          <tr>
            <td><code>[Silence]</code></td>
            <td class="status-community">Community</td>
            <td>Creates a pause</td>
            <td><code>[Silence]</code><br>(2 seconds)</td>
            <td>Useful for dramatic effect</td>
          </tr>
          <tr>
            <td><code>[Act I]</code>, <code>[Scene 1]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Narrative structure</td>
            <td><code>[Act I: Scene 1]</code><br>Opening narrative...</td>
            <td>For complex pieces like musicals/operas</td>
          </tr>
        </tbody>
      </table>
    </section>

    <section id="vocal-tags" class="section">
      <h2>4. Vocal & Character Tags</h2>
      
      <h3>Vocalist Notation</h3>
      <p>There are several ways to specify vocalist types:</p>
      <table>
        <thead>
          <tr>
            <th>Tag</th>
            <th>Status</th>
            <th>Description</th>
            <th>Example Usage</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>[Female Vocal]</code></td>
            <td class="status-official">Official</td>
            <td>Female singer</td>
            <td><code>[Female Vocal]</code><br>Lyrics for woman to sing...</td>
            <td>Can also use <code>[Woman]</code> or <code>[female]</code></td>
          </tr>
          <tr>
            <td><code>[Male Vocal]</code></td>
            <td class="status-official">Official</td>
            <td>Male singer</td>
            <td><code>[Male Vocal]</code><br>Lyrics for man to sing...</td>
            <td>Can also use <code>[Man]</code> or <code>[male]</code></td>
          </tr>
          <tr>
            <td><code>MAN:</code> or <code>WOMAN:</code></td>
            <td class="status-official">Official</td>
            <td>Speaker label format</td>
            <td><code>MAN: These are my words</code></td>
            <td>Alternative to bracket format</td>
          </tr>
          <tr>
            <td><code>SOPRANO:</code> or <code>TENOR:</code></td>
            <td class="status-community">Community</td>
            <td>Vocal range hint</td>
            <td><code>SOPRANO: High melodic line</code></td>
            <td>For operatic/classical styles</td>
          </tr>
          <tr>
            <td><code>[Duet]</code></td>
            <td class="status-community">Community</td>
            <td>Two vocalists together</td>
            <td><code>[Duet]</code><br>Lyrics for both to sing...</td>
            <td>Often male/female combination</td>
          </tr>
          <tr>
            <td><code>[Choir]</code></td>
            <td class="status-community">Community</td>
            <td>Multiple-voice harmony</td>
            <td><code>[Choir]</code><br>Lyrics for group to sing...</td>
            <td>Creates full, layered vocals</td>
          </tr>
          <tr>
            <td><code>[Harmonies]</code></td>
            <td class="status-community">Community</td>
            <td>Adds backing vocals</td>
            <td><code>[Harmonies]</code><br>Lyrics with harmony...</td>
            <td>Thickens the vocal texture</td>
          </tr>
          <tr>
            <td><code>[Layer Vocals]</code></td>
            <td class="status-community">Community</td>
            <td>Stacks vocal tracks</td>
            <td><code>[Layer Vocals]</code><br>Lyrics with stacked voices...</td>
            <td>Creates a wall of voices</td>
          </tr>
        </tbody>
      </table>
      
      <h3>Vocal Expressions</h3>
      <p>These tags indicate how vocals should be performed:</p>
      <table>
        <thead>
          <tr>
            <th>Tag</th>
            <th>Status</th>
            <th>Description</th>
            <th>Example Usage</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>[laughs]</code></td>
            <td class="status-official">Official</td>
            <td>Laughing sound</td>
            <td>Funny line<br><code>[laughs]</code></td>
            <td>For humorous sections</td>
          </tr>
          <tr>
            <td><code>[sighs]</code></td>
            <td class="status-official">Official</td>
            <td>Sighing sound</td>
            <td>Melancholic line<br><code>[sighs]</code></td>
            <td>Conveys emotion</td>
          </tr>
          <tr>
            <td><code>[whispers]</code></td>
            <td class="status-official">Official</td>
            <td>Quiet, intimate tone</td>
            <td><code>[whispers]</code><br>Whispered lyrics...</td>
            <td>Creates intimate feeling</td>
          </tr>
          <tr>
            <td><code>[shouts]</code></td>
            <td class="status-official">Official</td>
            <td>Loud vocal delivery</td>
            <td><code>[shouts]</code><br>Emphasized lyrics</td>
            <td>For intense moments</td>
          </tr>
          <tr>
            <td><code>[cries]</code></td>
            <td class="status-official">Official</td>
            <td>Crying sound</td>
            <td>Sad line<br><code>[cries]</code></td>
            <td>For emotional moments</td>
          </tr>
          <tr>
            <td><code>[gasps]</code></td>
            <td class="status-official">Official</td>
            <td>Gasp sound</td>
            <td>Shocking reveal<br><code>[gasps]</code></td>
            <td>Shows surprise</td>
          </tr>
          <tr>
            <td><code>[clears throat]</code></td>
            <td class="status-official">Official</td>
            <td>Throat clearing</td>
            <td>Before important line<br><code>[clears throat]</code></td>
            <td>Adds human element</td>
          </tr>
          <tr>
            <td><code>[spoken]</code></td>
            <td class="status-official">Official</td>
            <td>Non-sung speech</td>
            <td><code>[spoken]</code><br>Words to be spoken...</td>
            <td>Used for narration/poetry</td>
          </tr>
          <tr>
            <td><code>[♪ ... ♪]</code></td>
            <td class="status-official">Official</td>
            <td>Singing notation</td>
            <td><code>[♪] Sing this line [♪]</code></td>
            <td>Useful when mixing speech and singing</td>
          </tr>
          <tr>
            <td><code>—</code> or <code>...</code></td>
            <td class="status-official">Official</td>
            <td>Hesitation markers</td>
            <td><code>And I... don't know—maybe</code></td>
            <td>Creates natural pauses in delivery</td>
          </tr>
          <tr>
            <td><code>[Vulnerable]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Emotional, fragile tone</td>
            <td><code>[Vulnerable]</code><br>Emotional lyrics...</td>
            <td>For raw, exposed vocal delivery</td>
          </tr>
          <tr>
            <td><code>CAPITALS</code></td>
            <td class="status-community">Community</td>
            <td>Louder/intense vocals</td>
            <td><code>SHOUT THIS LINE</code></td>
            <td>Use for emphasis/intensity</td>
          </tr>
          <tr>
            <td><code>(parentheses)</code></td>
            <td class="status-community">Community</td>
            <td>Background vocals</td>
            <td><code>Main lyrics (echo lyrics)</code></td>
            <td>Creates call-and-response effect</td>
          </tr>
          <tr>
            <td><code>Extended Vo-o-o-wels</code></td>
            <td class="status-community">Community</td>
            <td>Drawn-out vocal notes</td>
            <td><code>Lo-o-o-ove</code></td>
            <td>Creates emotional emphasis</td>
          </tr>
        </tbody>
      </table>
    </section>

    <section id="sound-effects" class="section">
      <h2>5. Sound Effects & Atmosphere Tags</h2>
      <p>There are two distinct formats for sound effects:</p>
      <ul>
        <li><strong>Asterisks (*)</strong> - Used for environmental/ambient sounds (e.g., *rainfall*, *door creaks*)</li>
        <li><strong>Brackets ([])</strong> - Used for musical elements or transitions (e.g., [beat drops], [guitar solo])</li>
      </ul>
      
      <table>
        <thead>
          <tr>
            <th>Tag</th>
            <th>Status</th>
            <th>Description</th>
            <th>Example Usage</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>*rainfall*</code></td>
            <td class="status-community">Community</td>
            <td>Rain sounds</td>
            <td><code>*rainfall*</code><br>Gentle intro begins</td>
            <td>Use asterisks for ambient sounds</td>
          </tr>
          <tr>
            <td><code>*thunder*</code></td>
            <td class="status-community">Community</td>
            <td>Thunder clap</td>
            <td>Dramatic pause<br><code>*thunder*</code></td>
            <td>Creates dramatic effect</td>
          </tr>
          <tr>
            <td><code>*door creaks*</code></td>
            <td class="status-community">Community</td>
            <td>Door sound</td>
            <td><code>*door creaks*</code><br>Someone enters</td>
            <td>Environmental sound</td>
          </tr>
          <tr>
            <td><code>*footsteps*</code></td>
            <td class="status-community">Community</td>
            <td>Walking sound</td>
            <td><code>*footsteps*</code><br>Approaching slowly</td>
            <td>Creates tension</td>
          </tr>
          <tr>
            <td><code>[applause]</code></td>
            <td class="status-community">Community</td>
            <td>Audience clapping</td>
            <td><code>[applause]</code><br>After dramatic line</td>
            <td>Creates live feel</td>
          </tr>
          <tr>
            <td><code>[cheering]</code></td>
            <td class="status-community">Community</td>
            <td>Crowd cheering</td>
            <td>Final chorus<br><code>[cheering]</code></td>
            <td>For triumphant moments</td>
          </tr>
          <tr>
            <td><code>[birds chirping]</code></td>
            <td class="status-community">Community</td>
            <td>Bird sounds</td>
            <td>Dawn scene<br><code>[birds chirping]</code></td>
            <td>Creates outdoor atmosphere</td>
          </tr>
          <tr>
            <td><code>[phone ringing]</code></td>
            <td class="status-community">Community</td>
            <td>Phone ring sound</td>
            <td><code>[phone ringing]</code><br>Hello?</td>
            <td>For narrative effect</td>
          </tr>
          <tr>
            <td><code>[record scratch]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>DJ scratch sound</td>
            <td><code>[record scratch]</code><br>Wait a minute!</td>
            <td>For sudden stops/transitions</td>
          </tr>
          <tr>
            <td><code>[beeping]</code></td>
            <td class="status-community">Community</td>
            <td>Electronic beep</td>
            <td><code>[beeping]</code><br>System activated</td>
            <td>For technological/sci-fi feel</td>
          </tr>
          <tr>
            <td><code>[barking]</code></td>
            <td class="status-community">Community</td>
            <td>Dog bark</td>
            <td>Distant sound<br><code>[barking]</code></td>
            <td>Animal sounds</td>
          </tr>
          <tr>
            <td><code>[beat drops]</code></td>
            <td class="status-community">Community</td>
            <td>Music transition</td>
            <td><code>[beat drops]</code><br>Dance section begins</td>
            <td>Musical element</td>
          </tr>
          <tr>
            <td><code>[guitar solo]</code></td>
            <td class="status-community">Community</td>
            <td>Feature guitar</td>
            <td><code>[guitar solo]</code><br>Rock section</td>
            <td>Musical element</td>
          </tr>
          <tr>
            <td><code>[intense drums]</code></td>
            <td class="status-community">Community</td>
            <td>Percussion feature</td>
            <td><code>[intense drums]</code><br>Climactic moment</td>
            <td>Musical element</td>
          </tr>
        </tbody>
      </table>
    </section>

    <section id="dynamic-tags" class="section">
      <h2>6. Dynamic & Production Tags</h2>
      <table>
        <thead>
          <tr>
            <th>Tag</th>
            <th>Status</th>
            <th>Description</th>
            <th>Example Usage</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>[Build]</code></td>
            <td class="status-community">Community</td>
            <td>Gradual energy increase</td>
            <td><code>[Build]</code><br>Tension-building lyrics...</td>
            <td>For pre-chorus/transitions</td>
          </tr>
          <tr>
            <td><code>[Build Intensity]</code></td>
            <td class="status-community">Community</td>
            <td>Stronger energy ramp</td>
            <td><code>[Build Intensity]</code><br>Rising action...</td>
            <td>More dramatic than simple Build</td>
          </tr>
          <tr>
            <td><code>[Intensify]</code></td>
            <td class="status-community">Community</td>
            <td>Sudden energy spike</td>
            <td><code>[Intensify]</code><br>Powerful lyrics...</td>
            <td>For immediate impact</td>
          </tr>
          <tr>
            <td><code>[Drop]</code></td>
            <td class="status-community">Community</td>
            <td>High-energy impact point</td>
            <td><code>[Drop]</code><br>Main hook phrase...</td>
            <td>Popular in EDM/electronic</td>
          </tr>
          <tr>
            <td><code>[Crescendo]</code></td>
            <td class="status-community">Community</td>
            <td>Volume increase</td>
            <td><code>[Crescendo]</code><br>Growing louder...</td>
            <td>Gradual volume swell</td>
          </tr>
          <tr>
            <td><code>[Decrescendo]</code></td>
            <td class="status-community">Community</td>
            <td>Volume decrease</td>
            <td><code>[Decrescendo]</code><br>Fading away...</td>
            <td>Gradual volume reduction</td>
          </tr>
          <tr>
            <td><code>[Fade Out]</code></td>
            <td class="status-official">Official</td>
            <td>End with volume fade</td>
            <td><code>[Fade Out]</code><br>Final repeating lyrics...</td>
            <td>Used in outro section</td>
          </tr>
          <tr>
            <td><code>[Fade In]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Begin with volume fade-in</td>
            <td><code>[Fade In]</code><br>Gentle opening...</td>
            <td>For soft beginnings</td>
          </tr>
          <tr>
            <td><code>[Produced by ...]</code></td>
            <td class="status-community">Community</td>
            <td>Production style hint</td>
            <td><code>[Produced by Hans Zimmer]</code></td>
            <td>Place at top of prompt</td>
          </tr>
          <tr>
            <td><code>[Recorded at ...]</code></td>
            <td class="status-community">Community</td>
            <td>Studio atmosphere hint</td>
            <td><code>[Recorded at Abbey Road]</code></td>
            <td>Place at top of prompt</td>
          </tr>
          <tr>
            <td><code>[Mixed with ...]</code></td>
            <td class="status-community">Community</td>
            <td>Mixing style hint</td>
            <td><code>[Mixed with vintage equipment]</code></td>
            <td>Place at top of prompt</td>
          </tr>
          <tr>
            <td><code>[Instrumental]</code></td>
            <td class="status-official">Official</td>
            <td>No vocals/singing</td>
            <td><code>[Instrumental]</code><br>(piano and strings)</td>
            <td>For purely instrumental sections</td>
          </tr>
          <tr>
            <td><code>[Orchestral]</code></td>
            <td class="status-community">Community</td>
            <td>Full orchestra sound</td>
            <td><code>[Orchestral]</code><br>(sweeping strings)</td>
            <td>For cinematic sections</td>
          </tr>
          <tr>
            <td><code>[Big Finish]</code></td>
            <td class="status-community">Community</td>
            <td>Climactic ending</td>
            <td><code>[Big Finish]</code><br>Final powerful line</td>
            <td>Creates an impactful conclusion</td>
          </tr>
          <tr>
            <td><code>[Acapella]</code></td>
            <td class="status-community">Community</td>
            <td>Vocals only</td>
            <td><code>[Acapella]</code><br>Pure vocal performance</td>
            <td>Minimal/no instrumentation</td>
          </tr>
        </tbody>
      </table>
    </section>

    <section id="tempo-tags" class="section">
      <h2>7. Tempo & Music Theory Tags</h2>
      <table>
        <thead>
          <tr>
            <th>Tag</th>
            <th>Status</th>
            <th>Description</th>
            <th>Example Usage</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>[Rubato]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Flexible timing</td>
            <td><code>[Rubato]</code><br>Expressive lyrics...</td>
            <td>Adds human-like timing variations</td>
          </tr>
          <tr>
            <td><code>[Accelerando]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Gradually speed up</td>
            <td><code>[Accelerando]</code><br>Quickening lyrics...</td>
            <td>Builds excitement</td>
          </tr>
          <tr>
            <td><code>[Ritardando]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Gradually slow down</td>
            <td><code>[Ritardando]</code><br>Slowing lyrics...</td>
            <td>Creates conclusion feel</td>
          </tr>
          <tr>
            <td><code>[Rallentando]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Broader slowing</td>
            <td><code>[Rallentando]</code><br>Final words...</td>
            <td>More dramatic than Ritardando</td>
          </tr>
          <tr>
            <td><code>[Tempo primo]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Return to original speed</td>
            <td><code>[Tempo primo]</code><br>Back to theme...</td>
            <td>After tempo changes</td>
          </tr>
          <tr>
            <td><code>[Con moto]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>With movement/motion</td>
            <td><code>[Con moto]</code><br>Flowing lyrics...</td>
            <td>Adds forward momentum</td>
          </tr>
          <tr>
            <td><code>[Cantabile]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>In singing style</td>
            <td><code>[Cantabile]</code><br>Lyrical melody...</td>
            <td>For singing-like instrumental</td>
          </tr>
          <tr>
            <td><code>[Scherzando]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Playful, light</td>
            <td><code>[Scherzando]</code><br>Lighthearted lyrics...</td>
            <td>For whimsical sections</td>
          </tr>
          <tr>
            <td><code>[Dynamic Complex Progression]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Evolving chord changes</td>
            <td><code>[Dynamic Complex Progression]</code></td>
            <td>Creates sophisticated harmony</td>
          </tr>
          <tr>
            <td><code>[Epic Complex Progression]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Grand chord movement</td>
            <td><code>[Epic Complex Progression]</code></td>
            <td>For cinematic climaxes</td>
          </tr>
          <tr>
            <td><code>[Key: C minor]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Specifies key signature</td>
            <td><code>[Key: F major]</code><br>Bright melody...</td>
            <td>Attempts to set harmonic center</td>
          </tr>
        </tbody>
      </table>
    </section>

    <section id="instrument-tags" class="section">
      <h2>8. Instrument & Section-Specific Tags</h2>
      <table>
        <thead>
          <tr>
            <th>Tag</th>
            <th>Status</th>
            <th>Description</th>
            <th>Example Usage</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>[Guitar Solo]</code></td>
            <td class="status-community">Community</td>
            <td>Featured guitar</td>
            <td><code>[Guitar Solo]</code><br>(soaring melody)</td>
            <td>No vocals during this section</td>
          </tr>
          <tr>
            <td><code>[Piano Solo]</code></td>
            <td class="status-community">Community</td>
            <td>Featured piano</td>
            <td><code>[Piano Solo]</code><br>(emotional melody)</td>
            <td>Focuses on piano playing</td>
          </tr>
          <tr>
            <td><code>[Cello Solo]</code></td>
            <td class="status-community">Community</td>
            <td>Featured cello</td>
            <td><code>[Cello Solo]</code><br>(deep, resonant)</td>
            <td>For emotional string moments</td>
          </tr>
          <tr>
            <td><code>[Drum Solo]</code></td>
            <td class="status-community">Community</td>
            <td>Featured drums</td>
            <td><code>[Drum Solo]</code><br>(complex rhythm)</td>
            <td>Percussion-focused section</td>
          </tr>
          <tr>
            <td><code>[Saxophone Solo]</code></td>
            <td class="status-community">Community</td>
            <td>Featured sax</td>
            <td><code>[Saxophone Solo]</code><br>(jazzy riff)</td>
            <td>Creates jazz/blues feel</td>
          </tr>
          <tr>
            <td><code>[Synth Arpeggio]</code></td>
            <td class="status-experimental">Experimental</td>
            <td>Repeated synth pattern</td>
            <td><code>[Synth Arpeggio]</code><br>(rising pattern)</td>
            <td>Creates electronic texture</td>
          </tr>
          <tr>
            <td><code>[Bass Drop]</code></td>
            <td class="status-community">Community</td>
            <td>Heavy bass impact</td>
            <td><code>[Bass Drop]</code><br>(deep sub bass)</td>
            <td>Popular in EDM/dubstep</td>
          </tr>
          <tr>
            <td><code>[Acapella]</code></td>
            <td class="status-community">Community</td>
            <td>Vocals only</td>
            <td><code>[Acapella]</code><br>Lyrics without music...</td>
            <td>Minimal/no instrumentation</td>
          </tr>
          <tr>
            <td><code>[Percussion Break]</code></td>
            <td class="status-community">Community</td>
            <td>Rhythm-focused section</td>
            <td><code>[Percussion Break]</code><br>(tribal drums)</td>
            <td>Focuses on rhythm elements</td>
          </tr>
          <tr>
            <td><code>[String Section]</code></td>
            <td class="status-community">Community</td>
            <td>Featured strings</td>
            <td><code>[String Section]</code><br>(emotional melody)</td>
            <td>Violin/viola/cello focus</td>
          </tr>
          <tr>
            <td><code>[Latin Percussion]</code></td>
            <td class="status-community">Community</td>
            <td>Latin rhythm elements</td>
            <td><code>[Latin Percussion]</code><br>(salsa rhythm)</td>
            <td>May have variable reliability</td>
          </tr>
        </tbody>
      </table>
    </section>

    <section id="advanced" class="section">
      <h2>9. Advanced Features</h2>
      
      <h3>Meta-Object Notation</h3>
      <p>For structured control in newer Suno versions (V4+), you can use JSON-like meta-objects:</p>
      <div class="code-block">
[meta_object: arrangement]
[{
  "tempo": 135,
  "key": "D minor",
  "time_signature": "4/4",
  "structure": ["Intro", "Verse 1", "Pre-Chorus", "Chorus", "Verse 2",
    "Pre-Chorus", "Chorus", "Bridge", "Chorus", "Outro"],
  "instrumentation": {
    "drums": ["reggae rhythm", "808 bass"],
    "bass": ["deep sub-bass", "hypnotic bassline"],
    "melodic": ["synth pads", "electric guitar"],
    "effects": ["reverb", "delay", "vocal chops"],
    "vocals": ["female vocals", "harmonizer for chorus"]
  }
}]
      </div>
      
      <h3>Detailed Metadata Structure</h3>
      <p>Advanced users place structured metadata blocks at the top of prompts for comprehensive instructions:</p>
      <div class="code-block">
[GENRES: Ambient, Downtempo]
[SOUNDS LIKE: Bonobo, Tycho]
[STYLE: Atmospheric, Dreamy]
[MOOD: Reflective, Melancholic]
[VOCALS: Female, Ethereal, Whispered]
[ARRANGEMENT: Organic percussion, Electronic bass, Floating pads]
[INSTRUMENTATION: Piano, Synthesizers, Acoustic drums, Field recordings]
[TEMPO: Slow, 70 BPM]
[PRODUCTION: Lo-fi textures, Vinyl crackle, Wide stereo field]
[STRUCTURE: Ambient intro, 2 verses, Chorus, Bridge, Outro]
[DYNAMICS: Subtle build throughout, Climax at bridge]
[EMOTIONS: Nostalgia, Longing, Acceptance]
      </div>
      <div class="note">
        <strong>Note:</strong> This approach front-loads all song details in labeled categories. While not officially documented, users report this format helps guide the AI toward highly specific results, especially in earlier versions like v3.5.
      </div>
      
      <h3>Experimental Genre & Reference Tags</h3>
      <table>
        <thead>
          <tr>
            <th>Tag Type</th>
            <th>Examples</th>
            <th>Usage</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Genre-Specific</td>
            <td>[Cantopop], [K-pop], [Experimental Synth], [Hyperpop]</td>
            <td>Place before lyrics to guide genre style</td>
          </tr>
          <tr>
            <td>Media References</td>
            <td>[Interstellar Soundtrack], [Stranger Things Theme], [Cyberpunk]</td>
            <td>Creates sounds inspired by specific media</td>
          </tr>
          <tr>
            <td>Artist References</td>
            <td>[In the style of Billie Eilish], [Like Trent Reznor]</td>
            <td>Mimics artist's production style</td>
          </tr>
          <tr>
            <td>Uncommon Instruments</td>
            <td>[Washboard], [Theremin], [Glass Harmonica]</td>
            <td>Experiments with unusual instruments</td>
          </tr>
        </tbody>
      </table>
      <div class="note">
        <strong>Note:</strong> These tags have variable reliability and may not always produce the exact sound referenced. Results may vary across different Suno versions.
      </div>
      
      <h3>Best Practices</h3>
      <ol>
        <li><strong>Version Compatibility:</strong> Suno AI has evolved from V3.5 (requiring structured prompts) to V4+ (supporting natural language). Newer versions handle meta-tags more intuitively within conversational prompts.</li>
        <li><strong>Tag Reliability:</strong> Official tags are most reliable, community tags are generally effective but may have occasional issues, and experimental tags have variable results.</li>
        <li><strong>Conflicting Tags:</strong> Avoid contradictory instructions as they may confuse the AI. For example, don't use both [Accelerando] and [Ritardando] in the same section.</li>
        <li><strong>Prompt Length:</strong> While Suno can handle detailed prompts, focus on clarity. For Style directives, stay within 120-200 characters for optimal processing.</li>
        <li><strong>Creativity Balance:</strong> Use <code>temp=</code> to control randomness—higher values (0.85-1.0) for creative exploration, lower values (0.5-0.7) for more predictable results.</li>
        <li><strong>Parameter Testing:</strong> Experimental parameters may work differently across Suno versions. If an experimental tag doesn't produce the expected result, try incorporating its concept into the Style directive instead.</li>
        <li><strong>Custom Mode:</strong> For maximum control, use Suno's Custom Mode rather than simple text-to-song generation.</li>
        <li><strong>Character Limits:</strong> When using the Suno API directly, style prompts are limited to 120 characters and lyrics prompts to 3000 characters. In the web interface, these limits may be more flexible but keeping your style descriptions concise (under 200 characters) typically yields better results.</li>
        <li><strong>Genre Specificity:</strong> Don't hesitate to reference specific artists, soundtracks, or niche genres in your style description or as tags. For example, "Style: Ethereal ambient like Brian Eno with Blade Runner soundtrack influences" can yield more targeted results than generic style descriptions.</li>
        <li><strong>Token Order and Capitalization:</strong> Keep tags capitalized inside brackets [Like This] and consider ordering your style tags from general to specific (era → genre → subgenre → mood → instruments) for more predictable results.</li>
      </ol>
    </section>

    <section id="examples" class="section">
      <h2>10. Full Examples</h2>
      <div class="examples-grid">
        <div>
          <h3>Basic Example</h3>
          <div class="code-block">
&lt;details&gt;
temp=0.8
cfg=7.0
key=Aminor
time_signature=4/4
bpm=100
&lt;/details&gt;

Style: Indie folk with acoustic guitar, warm vocals, and subtle piano accents
Exclude: Heavy drums, distorted guitars, electronic elements

[Intro]
(gentle acoustic guitar melody)

[Verse 1]
[Female Vocal]
Morning light through autumn leaves
Memories of days gone by
Whispers of a changing season
In the cool September sky

[Chorus]
Time keeps flowing like a river
Carrying us along
Through the valleys and the mountains
Where we all belong

[Verse 2]
[Female Vocal]
Footprints fade on sandy shores
As waves wash them away
Nothing truly lasts forever
But love finds a way to stay

[Chorus]
Time keeps flowing like a river
Carrying us along
Through the valleys and the mountains
Where we all belong

[Outro]
(gentle acoustic guitar fading)
[End]
          </div>
        </div>
        
        <div>
          <h3>Advanced Example</h3>
          <div class="code-block">
&lt;details&gt;
temp=0.85
cfg=7.0
key=Aminor
time_signature=3/4
bpm=90
stereo_width=120
reverb=medium
delay_time=350ms
delay_feedback=20
dynamic_range=high
master_volume=0
rubato=moderate
&lt;/details&gt;

[Produced by Hans Zimmer and Massive Attack]
[Recorded at Air Studios London with vintage equipment]
[Mixed in Dolby Atmos with wide stereo imaging]

[GENRES: Cinematic, Orchestral, Dark Ambient]
[VOCALS: Female, Ethereal, Emotional]
[MOOD: Haunting, Melancholic, Introspective]
[TEMPO: Moderate waltz, 90 BPM]

Style: Cinematic orchestral with ethereal female vocals, dark atmospheric elements, haunting melodies
Exclude: Male vocals, EDM drops, trap beats, distorted guitars, heavy drums

[Intro]
[Fade In]
*rainfall*
[Orchestral]
Haunting piano notes echo in darkness
Strings slowly emerge from silence
[Dynamic Complex Progression]

[Verse 1]
[Female Vocal]
[Vulnerable]
Memories fade into shadows
Time stands still in this empty room
Whispers of what once was
Echo through the halls of my mind

[Chorus]
[Intensify]
LOST IN THE ECHOES OF TIME
Searching for what we left behind
LOST IN THE ECHOES OF TIME
(Will we ever find our way?)

[Bridge]
[Spoken Word]
[Rubato]
We construct elaborate memories
Only to watch them dissolve like morning mist
[Accelerando]
Faster and faster they slip away
Until nothing remains but feeling

[Outro]
[Female Vocal]
[Whisper]
Time moves on...
Whether we're ready or not
*distant thunder*
[Decrescendo]
[Fade Out]
[End]
          </div>
        </div>
      </div>
    </section>
    
    <section id="changelog" class="section">
      <h2>Changelog</h2>
      <table>
        <thead>
          <tr>
            <th>Version</th>
            <th>Date</th>
            <th>Changes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>v2.0</td>
            <td>March 21, 2025</td>
            <td>
              <ul>
                <li>Added interactive prompt builder functionality</li>
                <li>Fixed inconsistencies between vocal expressions and sound effects</li>
                <li>Clarified asterisks vs. brackets usage for different types of effects</li>
                <li>Updated vocalist notation with new alternatives (SOPRANO:, TENOR:, etc.)</li>
                <li>Added more detail about narrative structure tags ([Act I], [Scene 1])</li>
                <li>Improved documentation on vocal expression formatting</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>v1.0</td>
            <td>January 15, 2025</td>
            <td>
              <ul>
                <li>Initial comprehensive documentation</li>
                <li>Organized parameters and tags by category</li>
                <li>Added status indicators (Official, Community, Experimental)</li>
                <li>Included basic and advanced examples</li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>
    </section>
  </div>

  <button class="back-to-top" id="backToTop">↑</button>
  
  <!-- Prompt Builder Button -->
  <button class="prompt-builder-toggle" id="promptBuilderToggle">🧩</button>
  
  <!-- Prompt Builder Panel -->
  <div class="prompt-builder" id="promptBuilder">
    <div class="prompt-builder-header">
      <h3 style="margin: 0;">Suno Prompt Builder</h3>
      <button class="builder-button secondary" id="closePromptBuilder" style="padding: 3px 8px;">×</button>
    </div>
    
    <div class="prompt-builder-tabs">
      <div class="prompt-builder-tab active" data-target="styleTab">Style</div>
      <div class="prompt-builder-tab" data-target="structureTab">Structure</div>
      <div class="prompt-builder-tab" data-target="outputTab">Generated</div>
    </div>
    
    <div class="prompt-builder-content">
      <!-- Style Tab -->
      <div class="prompt-tab-content active" id="styleTab">
        <div class="prompt-section">
          <div class="prompt-section-title">Style Prompt <span style="font-weight: normal; font-size: 11px;">(max 200 chars)</span></div>
          <textarea class="styled-input" id="stylePrompt" placeholder="Describe your style here (e.g., Cinematic orchestral with ethereal female vocals)" maxlength="200"></textarea>
          <div class="character-counter" id="styleCounter">0/200</div>
          
          <div class="common-genres">
            <div class="prompt-section-title">Common Genres</div>
            <div class="tag-list">
              <span class="genre-tag" data-genre="Pop">Pop</span>
              <span class="genre-tag" data-genre="Rock">Rock</span>
              <span class="genre-tag" data-genre="Hip Hop">Hip Hop</span>
              <span class="genre-tag" data-genre="Electronic">Electronic</span>
              <span class="genre-tag" data-genre="Jazz">Jazz</span>
              <span class="genre-tag" data-genre="Classical">Classical</span>
              <span class="genre-tag" data-genre="R&B">R&B</span>
              <span class="genre-tag" data-genre="Country">Country</span>
              <span class="genre-tag" data-genre="Folk">Folk</span>
              <span class="genre-tag" data-genre="Ambient">Ambient</span>
              <span class="genre-tag" data-genre="Lo-fi">Lo-fi</span>
              <span class="genre-tag" data-genre="Cinematic">Cinematic</span>
            </div>
          </div>
        </div>
        
        <div class="prompt-section">
          <div class="prompt-section-title">Exclude <span style="font-weight: normal; font-size: 11px;">(max 200 chars)</span></div>
          <textarea class="styled-input" id="excludePrompt" placeholder="Elements to avoid (e.g., Heavy drums, distorted guitars, male vocals)" maxlength="200"></textarea>
          <div class="character-counter" id="excludeCounter">0/200</div>
        </div>
        
        <div class="prompt-section">
          <div class="prompt-section-title">Technical Parameters</div>
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
            <div>
              <label for="tempParam" style="font-size: 12px; display: block; margin-bottom: 3px;">Temperature</label>
              <input type="number" id="tempParam" class="styled-input" value="0.8" min="0.1" max="1.5" step="0.1" style="padding: 8px;">
            </div>
            <div>
              <label for="cfgParam" style="font-size: 12px; display: block; margin-bottom: 3px;">CFG</label>
              <input type="number" id="cfgParam" class="styled-input" value="7.0" min="1" max="20" step="0.5" style="padding: 8px;">
            </div>
            <div>
              <label for="keyParam" style="font-size: 12px; display: block; margin-bottom: 3px;">Key</label>
              <select id="keyParam" class="styled-input" style="padding: 8px;">
                <option value="Cmajor">C major</option>
                <option value="Cminor">C minor</option>
                <option value="Dbmajor">D♭ major</option>
                <option value="Csharpmajor">C♯ major</option>
                <option value="Dbminor">D♭ minor</option>
                <option value="Csharpminor">C♯ minor</option>
                <option value="Dmajor">D major</option>
                <option value="Dminor">D minor</option>
                <option value="Ebmajor">E♭ major</option>
                <option value="Dsharpmajor">D♯ major</option>
                <option value="Ebminor">E♭ minor</option>
                <option value="Dsharpminor">D♯ minor</option>
                <option value="Emajor">E major</option>
                <option value="Eminor">E minor</option>
                <option value="Fmajor">F major</option>
                <option value="Fminor">F minor</option>
                <option value="Gbmajor">G♭ major</option>
                <option value="Fsharpmajor">F♯ major</option>
                <option value="Gbminor">G♭ minor</option>
                <option value="Fsharpminor">F♯ minor</option>
                <option value="Gmajor">G major</option>
                <option value="Gminor">G minor</option>
                <option value="Abmajor">A♭ major</option>
                <option value="Gsharpmajor">G♯ major</option>
                <option value="Abminor">A♭ minor</option>
                <option value="Gsharpminor">G♯ minor</option>
                <option value="Amajor">A major</option>
                <option value="Aminor" selected>A minor</option>
                <option value="Bbmajor">B♭ major</option>
                <option value="Asharpmajor">A♯ major</option>
                <option value="Bbminor">B♭ minor</option>
                <option value="Asharpminor">A♯ minor</option>
                <option value="Bmajor">B major</option>
                <option value="Bminor">B minor</option>
              </select>
            </div>
            <div>
              <label for="bpmParam" style="font-size: 12px; display: block; margin-bottom: 3px;">BPM</label>
              <input type="number" id="bpmParam" class="styled-input" value="120" min="60" max="200" step="1" style="padding: 8px;">
            </div>
          </div>
        </div>
      </div>
      
      <!-- Structure Tab -->
      <div class="prompt-tab-content" id="structureTab">
        <div class="prompt-section">
          <div class="prompt-section-title">Song Structure</div>
          <div id="structureBuilder" style="border: 1px solid var(--gray-light); border-radius: 4px; padding: 10px; min-height: 100px;">
            <!-- Dynamic content will be inserted here -->
          </div>
          <div style="margin-top: 10px;">
            <button class="builder-button secondary" id="addSection">+ Add Section</button>
          </div>
        </div>
        
        <div class="prompt-section">
          <div class="prompt-section-title">Selected Elements</div>
          <div id="selectedElements" style="border: 1px solid var(--gray-light); border-radius: 4px; padding: 10px; min-height: 100px; font-size: 12px;">
            <!-- Dynamic content will be inserted here -->
          </div>
        </div>
      </div>
      
      <!-- Output Tab -->
      <div class="prompt-tab-content" id="outputTab">
        <textarea class="prompt-builder-textarea" id="promptOutput" placeholder="Your generated prompt will appear here..." style="min-height: 300px;"></textarea>
      </div>
    </div>
    
    <div class="prompt-builder-actions">
      <div>
        <button class="builder-button secondary" id="clearPrompt">Clear All</button>
        <button class="builder-button secondary" id="addTemplate">Load Template</button>
      </div>
      <div>
        <button class="builder-button primary" id="copyPrompt">Copy to Clipboard</button>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Navigation buttons
      const navButtons = document.querySelectorAll('.nav-button');
      
      navButtons.forEach(button => {
        button.addEventListener('click', function() {
          const targetId = this.getAttribute('data-target');
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            window.scrollTo({
              top: targetElement.offsetTop - 100,
              behavior: 'smooth'
            });
            
            // Update active button
            navButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
          }
        });
      });
      
      // Back to top button
      const backToTopBtn = document.getElementById('backToTop');
      
      window.addEventListener('scroll', function() {
        if (window.pageYOffset > 300) {
          backToTopBtn.classList.add('visible');
        } else {
          backToTopBtn.classList.remove('visible');
        }
      });
      
      backToTopBtn.addEventListener('click', function() {
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
      });
      
      // Search functionality
      const searchInput = document.getElementById('searchInput');
      
      searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const tables = document.querySelectorAll('table');
        const sections = document.querySelectorAll('section');
        
        // Remove previous highlights
        document.querySelectorAll('.highlight').forEach(function(el) {
          el.outerHTML = el.innerHTML;
        });
        
        if (searchTerm.length > 1) {
          let hasAnyMatch = false;
          
          // Hide all sections initially
          sections.forEach(section => {
            section.style.display = 'none';
          });
          
          // Search in tables
          tables.forEach(function(table) {
            const rows = table.querySelectorAll('tbody tr');
            let tableHasMatch = false;
            
            rows.forEach(function(row) {
              const cells = row.querySelectorAll('td');
              let rowHasMatch = false;
              
              cells.forEach(function(cell) {
                const content = cell.textContent.toLowerCase();
                if (content.includes(searchTerm)) {
                  rowHasMatch = true;
                  tableHasMatch = true;
                  hasAnyMatch = true;
                  
                  // Highlight matching text
                  cell.innerHTML = cell.innerHTML.replace(
                    new RegExp(searchTerm, 'gi'),
                    match => `<span class="highlight">${match}</span>`
                  );
                }
              });
              
              // Show/hide rows based on search
              row.style.display = rowHasMatch ? '' : 'none';
            });
            
            // Show parent section if table has a match
            if (tableHasMatch) {
              const parentSection = table.closest('section');
              if (parentSection) {
                parentSection.style.display = 'block';
              }
            }
          });
          
          // Search in code blocks and other text
          document.querySelectorAll('.code-block, p, h3').forEach(element => {
            const content = element.textContent.toLowerCase();
            if (content.includes(searchTerm)) {
              hasAnyMatch = true;
              const parentSection = element.closest('section');
              if (parentSection) {
                parentSection.style.display = 'block';
              }
              
              // Highlight matching text in code blocks
              if (element.classList.contains('code-block')) {
                // We don't highlight in code blocks to preserve formatting
              } else {
                element.innerHTML = element.innerHTML.replace(
                  new RegExp(searchTerm, 'gi'),
                  match => `<span class="highlight">${match}</span>`
                );
              }
            }
          });
          
          // If no matches at all, show quick start section
          if (!hasAnyMatch) {
            document.getElementById('quick-start').style.display = 'block';
          }
        } else {
          // If search is cleared, show all sections and rows
          sections.forEach(section => {
            section.style.display = 'block';
          });
          
          document.querySelectorAll('tbody tr').forEach(function(el) {
            el.style.display = '';
          });
        }
      });
      
      // Prompt Builder Functionality
      const promptBuilder = document.getElementById('promptBuilder');
      const promptBuilderToggle = document.getElementById('promptBuilderToggle');
      const closePromptBuilder = document.getElementById('closePromptBuilder');
      const promptOutput = document.getElementById('promptOutput');
      const clearPromptBtn = document.getElementById('clearPrompt');
      const copyPromptBtn = document.getElementById('copyPrompt');
      const addTemplateBtn = document.getElementById('addTemplate');
      
      // Style tab elements
      const stylePrompt = document.getElementById('stylePrompt');
      const excludePrompt = document.getElementById('excludePrompt');
      const styleCounter = document.getElementById('styleCounter');
      const excludeCounter = document.getElementById('excludeCounter');
      const genreTags = document.querySelectorAll('.genre-tag');
      const tempParam = document.getElementById('tempParam');
      const cfgParam = document.getElementById('cfgParam');
      const keyParam = document.getElementById('keyParam');
      const bpmParam = document.getElementById('bpmParam');
      
      // Structure tab elements
      const structureBuilder = document.getElementById('structureBuilder');
      const selectedElements = document.getElementById('selectedElements');
      const addSectionBtn = document.getElementById('addSection');
      
      // Tabs
      const tabButtons = document.querySelectorAll('.prompt-builder-tab');
      const tabContents = document.querySelectorAll('.prompt-tab-content');
      
      // Toggle prompt builder panel
      promptBuilderToggle.addEventListener('click', function() {
        promptBuilder.classList.toggle('active');
      });
      
      closePromptBuilder.addEventListener('click', function() {
        promptBuilder.classList.remove('active');
      });
      
      // Tab switching
      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          // Get target tab
          const targetId = this.getAttribute('data-target');
          
          // Set active tab button
          tabButtons.forEach(btn => btn.classList.remove('active'));
          this.classList.add('active');
          
          // Show correct tab content
          tabContents.forEach(content => {
            content.classList.remove('active');
            if (content.id === targetId) {
              content.classList.add('active');
            }
          });
          
          // If switching to output tab, update the generated prompt
          if (targetId === 'outputTab') {
            generateFullPrompt();
          }
        });
      });
      
      // Character counters
      stylePrompt.addEventListener('input', function() {
        const count = this.value.length;
        styleCounter.textContent = `${count}/200`;
        
        if (count > 180) {
          styleCounter.className = 'character-counter warning';
        } else if (count > 195) {
          styleCounter.className = 'character-counter danger';
        } else {
          styleCounter.className = 'character-counter';
        }
        
        // Update generated prompt
        updateSelectedElements();
      });
      
      excludePrompt.addEventListener('input', function() {
        const count = this.value.length;
        excludeCounter.textContent = `${count}/200`;
        
        if (count > 180) {
          excludeCounter.className = 'character-counter warning';
        } else if (count > 195) {
          excludeCounter.className = 'character-counter danger';
        } else {
          excludeCounter.className = 'character-counter';
        }
        
        // Update generated prompt
        updateSelectedElements();
      });
      
      // Handle genre tag clicks
      genreTags.forEach(tag => {
        tag.addEventListener('click', function() {
          const genre = this.getAttribute('data-genre');
          
          // Toggle selection
          this.classList.toggle('selected');
          
          // Update style prompt
          if (this.classList.contains('selected')) {
            // Add genre to style prompt if not already there
            if (!stylePrompt.value.includes(genre)) {
              if (stylePrompt.value.trim() === '') {
                stylePrompt.value = genre;
              } else {
                stylePrompt.value += `, ${genre}`;
              }
            }
          } else {
            // Remove genre from style prompt
            stylePrompt.value = stylePrompt.value
              .replace(new RegExp(`^${genre}, `, 'i'), '')
              .replace(new RegExp(`, ${genre}(?=,|$)`, 'i'), '')
              .replace(new RegExp(`^${genre}$`, 'i'), '');
          }
          
          // Trigger input event to update character count
          stylePrompt.dispatchEvent(new Event('input'));
        });
      });
      
      // Technical parameters change events
      [tempParam, cfgParam, keyParam, bpmParam].forEach(param => {
        param.addEventListener('change', updateSelectedElements);
      });
      
      // Structure tab functionality
      let sectionCount = 0;
      
      addSectionBtn.addEventListener('click', function() {
        addSongSection();
      });
      
      function addSongSection() {
        const sectionIndex = sectionCount++;
        const sectionTypes = ['Intro', 'Verse', 'Chorus', 'Bridge', 'Outro'];
        const vocalTypes = ['None', 'Female Vocal', 'Male Vocal', 'Duet'];
        
        const sectionDiv = document.createElement('div');
        sectionDiv.className = 'song-section';
        sectionDiv.style.border = '1px solid #e9ecef';
        sectionDiv.style.borderRadius = '4px';
        sectionDiv.style.padding = '8px';
        sectionDiv.style.marginBottom = '10px';
        sectionDiv.style.display = 'flex';
        sectionDiv.style.alignItems = 'center';
        sectionDiv.style.justifyContent = 'space-between';
        
        const sectionControls = document.createElement('div');
        sectionControls.style.flex = '1';
        
        // Section type selector
        const sectionTypeSelect = document.createElement('select');
        sectionTypeSelect.className = 'styled-input';
        sectionTypeSelect.style.width = '100px';
        sectionTypeSelect.style.marginRight = '5px';
        sectionTypeSelect.style.padding = '5px';
        
        sectionTypes.forEach(type => {
          const option = document.createElement('option');
          option.value = type;
          option.textContent = type;
          sectionTypeSelect.appendChild(option);
        });
        
        // Vocal type selector
        const vocalTypeSelect = document.createElement('select');
        vocalTypeSelect.className = 'styled-input';
        vocalTypeSelect.style.width = '120px';
        vocalTypeSelect.style.padding = '5px';
        
        vocalTypes.forEach(type => {
          const option = document.createElement('option');
          option.value = type;
          option.textContent = type;
          vocalTypeSelect.appendChild(option);
        });
        
        // Remove button
        const removeBtn = document.createElement('button');
        removeBtn.className = 'builder-button secondary';
        removeBtn.textContent = '×';
        removeBtn.style.padding = '3px 8px';
        removeBtn.style.marginLeft = '5px';
        
        removeBtn.addEventListener('click', function() {
          sectionDiv.remove();
          updateSelectedElements();
        });
        
        // Add change event listeners
        [sectionTypeSelect, vocalTypeSelect].forEach(select => {
          select.addEventListener('change', updateSelectedElements);
        });
        
        // Add elements to section
        sectionControls.appendChild(sectionTypeSelect);
        sectionControls.appendChild(vocalTypeSelect);
        sectionDiv.appendChild(sectionControls);
        sectionDiv.appendChild(removeBtn);
        structureBuilder.appendChild(sectionDiv);
        
        updateSelectedElements();
      }
      
      // Add default sections
      addSongSection(); // Intro
      addSongSection(); // Verse
      addSongSection(); // Chorus
      addSongSection(); // Outro
      
      // Update selected elements display
      function updateSelectedElements() {
        // Clear current display
        selectedElements.innerHTML = '';
        
        // Technical parameters
        const techParams = document.createElement('div');
        techParams.style.marginBottom = '10px';
        techParams.innerHTML = `<strong>Technical:</strong> temp=${tempParam.value}, cfg=${cfgParam.value}, key=${keyParam.value}, bpm=${bpmParam.value}`;
        selectedElements.appendChild(techParams);
        
        // Style directives - now shown as inside the details section
        if (stylePrompt.value.trim()) {
          const styleDiv = document.createElement('div');
          styleDiv.style.marginBottom = '10px';
          styleDiv.innerHTML = `<strong>Style parameter:</strong> style=${stylePrompt.value}`;
          selectedElements.appendChild(styleDiv);
        }
        
        if (excludePrompt.value.trim()) {
          const excludeDiv = document.createElement('div');
          excludeDiv.style.marginBottom = '10px';
          excludeDiv.innerHTML = `<strong>Exclude parameter:</strong> exclude=${excludePrompt.value}`;
          selectedElements.appendChild(excludeDiv);
        }
        
        // Section structure
        const structureTitle = document.createElement('div');
        structureTitle.innerHTML = '<strong>Structure:</strong>';
        structureTitle.style.marginBottom = '5px';
        selectedElements.appendChild(structureTitle);
        
        const sectionsList = document.createElement('ul');
        sectionsList.style.margin = '0';
        sectionsList.style.paddingLeft = '20px';
        
        document.querySelectorAll('.song-section').forEach(section => {
          const sectionType = section.querySelector('select:first-child').value;
          const vocalType = section.querySelector('select:last-of-type').value;
          
          const li = document.createElement('li');
          li.textContent = vocalType === 'None' ? 
            `[${sectionType}]` : 
            `[${sectionType}] with [${vocalType}]`;
          
          sectionsList.appendChild(li);
        });
        
        selectedElements.appendChild(sectionsList);
        
        // Table selections
        const tableSelections = document.querySelectorAll('.selectable-row.selected');
        if (tableSelections.length > 0) {
          const selectionsTitle = document.createElement('div');
          selectionsTitle.innerHTML = '<strong>Table Selections:</strong>';
          selectionsTitle.style.marginTop = '10px';
          selectionsTitle.style.marginBottom = '5px';
          selectedElements.appendChild(selectionsTitle);
          
          const selectionsList = document.createElement('ul');
          selectionsList.style.margin = '0';
          selectionsList.style.paddingLeft = '20px';
          
          tableSelections.forEach(row => {
            // Use the stored tag content (which has proper formatting)
            const tagContent = row.getAttribute('data-tag-content');
            
            if (tagContent) {
              const li = document.createElement('li');
              li.textContent = tagContent;
              selectionsList.appendChild(li);
            }
          });
          
          selectedElements.appendChild(selectionsList);
        }
      }
      
      // Clear prompt
      clearPromptBtn.addEventListener('click', function() {
        // Clear form fields
        stylePrompt.value = '';
        excludePrompt.value = '';
        styleCounter.textContent = '0/200';
        excludeCounter.textContent = '0/200';
        
        // Reset technical parameters
        tempParam.value = '0.8';
        cfgParam.value = '7.0';
        keyParam.value = 'Aminor';
        bpmParam.value = '120';
        
        // Clear genre tags
        genreTags.forEach(tag => tag.classList.remove('selected'));
        
        // Clear structure builder (except first 4 sections)
        structureBuilder.innerHTML = '';
        sectionCount = 0;
        addSongSection(); // Intro
        addSongSection(); // Verse
        addSongSection(); // Chorus
        addSongSection(); // Outro
        
        // Clear prompt output
        promptOutput.value = '';
        
        // Clear all table selections
        document.querySelectorAll('.selectable-row').forEach(row => {
          row.classList.remove('selected');
          const checkbox = row.querySelector('.select-tag');
          if (checkbox) checkbox.classList.remove('selected');
        });
        
        // Reset single-select groups
        singleSelectGroups.forEach(group => {
          group.selected = null;
        });
        
        // Update selected elements
        updateSelectedElements();
      });
      
      // Copy to clipboard
      copyPromptBtn.addEventListener('click', function() {
        // Make sure we have the latest prompt
        generateFullPrompt();
        
        // Select and copy
        promptOutput.select();
        document.execCommand('copy');
        
        // Visual feedback
        copyPromptBtn.textContent = 'Copied!';
        setTimeout(() => {
          copyPromptBtn.textContent = 'Copy to Clipboard';
        }, 2000);
      });
      
      // Add template
      addTemplateBtn.addEventListener('click', function() {
        stylePrompt.value = 'Indie folk with acoustic guitar, warm vocals, and subtle piano accents';
        excludePrompt.value = 'Heavy drums, distorted guitars, electronic elements';
        stylePrompt.dispatchEvent(new Event('input'));
        excludePrompt.dispatchEvent(new Event('input'));
        
        // Set genres
        document.querySelector('.genre-tag[data-genre="Folk"]').classList.add('selected');
        document.querySelector('.genre-tag[data-genre="Ambient"]').classList.add('selected');
        
        // Reset sections
        structureBuilder.innerHTML = '';
        sectionCount = 0;
        
        // Add template sections with vocals
        addDefaultSection('Intro', 'None');
        addDefaultSection('Verse', 'Female Vocal');
        addDefaultSection('Chorus', 'Female Vocal');
        addDefaultSection('Verse', 'Female Vocal');
        addDefaultSection('Chorus', 'Female Vocal');
        addDefaultSection('Outro', 'None');
        
        // Generate the full prompt
        generateFullPrompt();
        
        // Show the Output tab
        document.querySelector('.prompt-builder-tab[data-target="outputTab"]').click();
      });
      
      function addDefaultSection(type, vocal) {
        const sectionDiv = document.createElement('div');
        sectionDiv.className = 'song-section';
        sectionDiv.style.border = '1px solid #e9ecef';
        sectionDiv.style.borderRadius = '4px';
        sectionDiv.style.padding = '8px';
        sectionDiv.style.marginBottom = '10px';
        sectionDiv.style.display = 'flex';
        sectionDiv.style.alignItems = 'center';
        sectionDiv.style.justifyContent = 'space-between';
        
        const sectionControls = document.createElement('div');
        sectionControls.style.flex = '1';
        
        // Section type selector
        const sectionTypeSelect = document.createElement('select');
        sectionTypeSelect.className = 'styled-input';
        sectionTypeSelect.style.width = '100px';
        sectionTypeSelect.style.marginRight = '5px';
        sectionTypeSelect.style.padding = '5px';
        
        ['Intro', 'Verse', 'Chorus', 'Bridge', 'Outro'].forEach(t => {
          const option = document.createElement('option');
          option.value = t;
          option.textContent = t;
          if (t === type) option.selected = true;
          sectionTypeSelect.appendChild(option);
        });
        
        // Vocal type selector
        const vocalTypeSelect = document.createElement('select');
        vocalTypeSelect.className = 'styled-input';
        vocalTypeSelect.style.width = '120px';
        vocalTypeSelect.style.padding = '5px';
        
        ['None', 'Female Vocal', 'Male Vocal', 'Duet'].forEach(t => {
          const option = document.createElement('option');
          option.value = t;
          option.textContent = t;
          if (t === vocal) option.selected = true;
          vocalTypeSelect.appendChild(option);
        });
        
        // Remove button
        const removeBtn = document.createElement('button');
        removeBtn.className = 'builder-button secondary';
        removeBtn.textContent = '×';
        removeBtn.style.padding = '3px 8px';
        removeBtn.style.marginLeft = '5px';
        
        removeBtn.addEventListener('click', function() {
          sectionDiv.remove();
          updateSelectedElements();
        });
        
        // Add change event listeners
        [sectionTypeSelect, vocalTypeSelect].forEach(select => {
          select.addEventListener('change', updateSelectedElements);
        });
        
        // Add elements to section
        sectionControls.appendChild(sectionTypeSelect);
        sectionControls.appendChild(vocalTypeSelect);
        sectionDiv.appendChild(sectionControls);
        sectionDiv.appendChild(removeBtn);
        structureBuilder.appendChild(sectionDiv);
        
        sectionCount++;
        updateSelectedElements();
      }
      
      // Generate the complete prompt
      function generateFullPrompt() {
        let prompt = '';
        
        // Technical parameters
        prompt += '<details>\n';
        prompt += `temp=${tempParam.value}\n`;
        prompt += `cfg=${cfgParam.value}\n`;
        prompt += `key=${keyParam.value}\n`;
        prompt += `bpm=${bpmParam.value}\n`;
        prompt += 'style=';
        // Add style in the details section (limited to 200 chars)
        if (stylePrompt.value.trim()) {
          prompt += stylePrompt.value;
        }
        prompt += '\n';
        
        // Add exclude in the details section (limited to 200 chars)
        prompt += 'exclude=';
        if (excludePrompt.value.trim()) {
          prompt += excludePrompt.value;
        }
        prompt += '\n';
        prompt += '</details>\n\n';
        
        // Song structure sections
        document.querySelectorAll('.song-section').forEach(section => {
          const sectionType = section.querySelector('select:first-child').value;
          const vocalType = section.querySelector('select:last-of-type').value;
          
          prompt += `[${sectionType}]\n`;
          
          if (vocalType !== 'None') {
            prompt += `[${vocalType}]\n`;
          }
          
          prompt += '\n';
        });
        
        // Table selections (additional elements)
        const tableSelections = document.querySelectorAll('.selectable-row.selected');
        let hasAddedEffects = false;
        
        tableSelections.forEach(row => {
          // Use the stored tag content (which has proper formatting)
          const tagContent = row.getAttribute('data-tag-content');
          
          if (tagContent) {
            // Avoid duplicating structure or vocalist tags that are already in the structure
            const sectionMatch = tagContent.match(/^\[(Intro|Verse|Chorus|Bridge|Outro|Act|Scene)\b/);
            const vocalistMatch = tagContent.match(/^\[(Female|Male) Vocal\]/);
            
            if (!sectionMatch && !vocalistMatch) {
              hasAddedEffects = true;
              prompt += tagContent + '\n\n';
            }
          }
        });
        
        // Add End tag
        prompt += '[End]';
        
        // Update output textarea
        promptOutput.value = prompt;
      }
      
      // Make table rows selectable for prompt builder
      const tables = document.querySelectorAll('table');
      
      // Define selection type for tables (default: multiple)
      // These groups will only allow one selection at a time
      const singleSelectGroups = [
        { name: 'vocalist-type', selected: null, tablePath: '#vocal-tags table:nth-child(3)' },
        { name: 'structure-primary', selected: null, tablePath: '#structure-tags table' },
        { name: 'key-signature', selected: null, regex: /Key: [A-G]/ }
      ];
      
      // Function to check if a row should be single-select
      function getSelectionType(row) {
        const rowText = row.textContent;
        
        // Check if the row matches any single-select group
        for (const group of singleSelectGroups) {
          if (group.tablePath && row.closest(group.tablePath)) {
            return { type: 'single', group };
          }
          if (group.regex && group.regex.test(rowText)) {
            return { type: 'single', group };
          }
        }
        
        return { type: 'multiple', group: null };
      }
      
      // Process all table rows and make them selectable
      tables.forEach(table => {
        const section = table.closest('section');
        const sectionId = section ? section.id : '';
        let skipHeader = true; // Skip the header row
        
        // Check if this table should be selectable
        if (['quick-start', 'changelog'].includes(sectionId)) {
          return; // Skip these tables
        }
        
        const rows = table.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          if (skipHeader) {
            skipHeader = false;
            return;
          }
          
          // Get the selection type
          const { type, group } = getSelectionType(row);
          
          // Modify the row for selection
          row.classList.add('selectable-row');
          
          // Add selection checkbox and type indicator
          const firstCell = row.querySelector('td');
          if (firstCell) {
            const selectionType = document.createElement('span');
            selectionType.className = `selection-type ${type}`;
            selectionType.textContent = type === 'single' ? 'Select One' : 'Multi';
            firstCell.appendChild(selectionType);
            
            const checkbox = document.createElement('span');
            checkbox.className = 'select-tag';
            firstCell.insertBefore(checkbox, firstCell.firstChild);
            
            // Store the full tag format for this row
            const codeEl = row.querySelector('code');
            let tagContent = '';
            
            if (codeEl) {
              // Get the raw text content
              const rawContent = codeEl.textContent;
              
              // Check if it already has brackets
              if (rawContent.startsWith('[') && rawContent.endsWith(']')) {
                tagContent = rawContent;
              } 
              // Check if it starts with * and ends with * (for sound effects)
              else if (rawContent.startsWith('*') && rawContent.endsWith('*')) {
                tagContent = rawContent;
              }
              // For elements that need brackets but don't have them
              else if (sectionId === 'sound-effects' || sectionId === 'dynamic-tags' || 
                       sectionId === 'instrument-tags' || rawContent.includes('beat') || 
                       rawContent.includes('solo') || rawContent.includes('drums')) {
                // Musical elements should have brackets
                tagContent = `[${rawContent}]`;
              }
              // Default case
              else {
                tagContent = rawContent;
              }
              
              row.setAttribute('data-tag-content', tagContent);
            }
            
            // Handle click events for selection
            row.addEventListener('click', function() {
              if (type === 'single') {
                // Handle single selection (radio button behavior)
                if (group.selected === row) {
                  // Deselect if already selected
                  row.classList.remove('selected');
                  checkbox.classList.remove('selected');
                  group.selected = null;
                } else {
                  // Deselect previous selection in this group
                  if (group.selected) {
                    group.selected.classList.remove('selected');
                    const prevCheckbox = group.selected.querySelector('.select-tag');
                    if (prevCheckbox) prevCheckbox.classList.remove('selected');
                  }
                  
                  // Select this row
                  row.classList.add('selected');
                  checkbox.classList.add('selected');
                  group.selected = row;
                }
              } else {
                // Handle multiple selection (checkbox behavior)
                row.classList.toggle('selected');
                checkbox.classList.toggle('selected');
              }
              
              // Update selected elements
              updateSelectedElements();
            });
          }
        });
      });
      
      // Initialize
      updateSelectedElements();
      
      // Initially highlight the Quick Start button
      navButtons[0].classList.add('active');

      // Set visibility on page load
      const hash = window.location.hash;
      if (hash) {
        const targetId = hash.substring(1);
        const targetElement = document.getElementById(targetId);
        const targetButton = document.querySelector(`.nav-button[data-target="${targetId}"]`);
        
        if (targetElement && targetButton) {
          setTimeout(() => {
            window.scrollTo({
              top: targetElement.offsetTop - 100,
              behavior: 'auto'
            });
            
            navButtons.forEach(btn => btn.classList.remove('active'));
            targetButton.classList.add('active');
          }, 100);
        }
      }
    });
  </script>
</body>
</html>